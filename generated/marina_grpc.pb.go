// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: marina.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarinaClient is the client API for Marina service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarinaClient interface {
	Retrieve(ctx context.Context, in *RetrievalRequest, opts ...grpc.CallOption) (Marina_RetrieveClient, error)
	Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (Marina_DeployClient, error)
	ExampleStream(ctx context.Context, opts ...grpc.CallOption) (Marina_ExampleStreamClient, error)
	Example(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error)
}

type marinaClient struct {
	cc grpc.ClientConnInterface
}

func NewMarinaClient(cc grpc.ClientConnInterface) MarinaClient {
	return &marinaClient{cc}
}

func (c *marinaClient) Retrieve(ctx context.Context, in *RetrievalRequest, opts ...grpc.CallOption) (Marina_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marina_ServiceDesc.Streams[0], "/protobuf.Marina/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &marinaRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marina_RetrieveClient interface {
	Recv() (*RetrievalResponse, error)
	grpc.ClientStream
}

type marinaRetrieveClient struct {
	grpc.ClientStream
}

func (x *marinaRetrieveClient) Recv() (*RetrievalResponse, error) {
	m := new(RetrievalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marinaClient) Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (Marina_DeployClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marina_ServiceDesc.Streams[1], "/protobuf.Marina/Deploy", opts...)
	if err != nil {
		return nil, err
	}
	x := &marinaDeployClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marina_DeployClient interface {
	Recv() (*DeploymentResponse, error)
	grpc.ClientStream
}

type marinaDeployClient struct {
	grpc.ClientStream
}

func (x *marinaDeployClient) Recv() (*DeploymentResponse, error) {
	m := new(DeploymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marinaClient) ExampleStream(ctx context.Context, opts ...grpc.CallOption) (Marina_ExampleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marina_ServiceDesc.Streams[2], "/protobuf.Marina/ExampleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &marinaExampleStreamClient{stream}
	return x, nil
}

type Marina_ExampleStreamClient interface {
	Send(*ExampleRequest) error
	Recv() (*ExampleResponse, error)
	grpc.ClientStream
}

type marinaExampleStreamClient struct {
	grpc.ClientStream
}

func (x *marinaExampleStreamClient) Send(m *ExampleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marinaExampleStreamClient) Recv() (*ExampleResponse, error) {
	m := new(ExampleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marinaClient) Example(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleResponse, error) {
	out := new(ExampleResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Marina/Example", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarinaServer is the server API for Marina service.
// All implementations must embed UnimplementedMarinaServer
// for forward compatibility
type MarinaServer interface {
	Retrieve(*RetrievalRequest, Marina_RetrieveServer) error
	Deploy(*DeploymentRequest, Marina_DeployServer) error
	ExampleStream(Marina_ExampleStreamServer) error
	Example(context.Context, *ExampleRequest) (*ExampleResponse, error)
	mustEmbedUnimplementedMarinaServer()
}

// UnimplementedMarinaServer must be embedded to have forward compatible implementations.
type UnimplementedMarinaServer struct {
}

func (UnimplementedMarinaServer) Retrieve(*RetrievalRequest, Marina_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedMarinaServer) Deploy(*DeploymentRequest, Marina_DeployServer) error {
	return status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedMarinaServer) ExampleStream(Marina_ExampleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExampleStream not implemented")
}
func (UnimplementedMarinaServer) Example(context.Context, *ExampleRequest) (*ExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Example not implemented")
}
func (UnimplementedMarinaServer) mustEmbedUnimplementedMarinaServer() {}

// UnsafeMarinaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarinaServer will
// result in compilation errors.
type UnsafeMarinaServer interface {
	mustEmbedUnimplementedMarinaServer()
}

func RegisterMarinaServer(s grpc.ServiceRegistrar, srv MarinaServer) {
	s.RegisterService(&Marina_ServiceDesc, srv)
}

func _Marina_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrievalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarinaServer).Retrieve(m, &marinaRetrieveServer{stream})
}

type Marina_RetrieveServer interface {
	Send(*RetrievalResponse) error
	grpc.ServerStream
}

type marinaRetrieveServer struct {
	grpc.ServerStream
}

func (x *marinaRetrieveServer) Send(m *RetrievalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marina_Deploy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarinaServer).Deploy(m, &marinaDeployServer{stream})
}

type Marina_DeployServer interface {
	Send(*DeploymentResponse) error
	grpc.ServerStream
}

type marinaDeployServer struct {
	grpc.ServerStream
}

func (x *marinaDeployServer) Send(m *DeploymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marina_ExampleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarinaServer).ExampleStream(&marinaExampleStreamServer{stream})
}

type Marina_ExampleStreamServer interface {
	Send(*ExampleResponse) error
	Recv() (*ExampleRequest, error)
	grpc.ServerStream
}

type marinaExampleStreamServer struct {
	grpc.ServerStream
}

func (x *marinaExampleStreamServer) Send(m *ExampleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marinaExampleStreamServer) Recv() (*ExampleRequest, error) {
	m := new(ExampleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Marina_Example_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarinaServer).Example(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Marina/Example",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarinaServer).Example(ctx, req.(*ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Marina_ServiceDesc is the grpc.ServiceDesc for Marina service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marina_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Marina",
	HandlerType: (*MarinaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Example",
			Handler:    _Marina_Example_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Retrieve",
			Handler:       _Marina_Retrieve_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Deploy",
			Handler:       _Marina_Deploy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExampleStream",
			Handler:       _Marina_ExampleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "marina.proto",
}
