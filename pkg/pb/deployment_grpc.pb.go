// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: deployment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarinaClient is the client API for Marina service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarinaClient interface {
	RetrievePlan(ctx context.Context, in *RetrievePlanRequest, opts ...grpc.CallOption) (Marina_RetrievePlanClient, error)
	Retrieve(ctx context.Context, in *RetrievalRequest, opts ...grpc.CallOption) (Marina_RetrieveClient, error)
}

type marinaClient struct {
	cc grpc.ClientConnInterface
}

func NewMarinaClient(cc grpc.ClientConnInterface) MarinaClient {
	return &marinaClient{cc}
}

func (c *marinaClient) RetrievePlan(ctx context.Context, in *RetrievePlanRequest, opts ...grpc.CallOption) (Marina_RetrievePlanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marina_ServiceDesc.Streams[0], "/protobuf.Marina/RetrievePlan", opts...)
	if err != nil {
		return nil, err
	}
	x := &marinaRetrievePlanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marina_RetrievePlanClient interface {
	Recv() (*RetrievePlanResponse, error)
	grpc.ClientStream
}

type marinaRetrievePlanClient struct {
	grpc.ClientStream
}

func (x *marinaRetrievePlanClient) Recv() (*RetrievePlanResponse, error) {
	m := new(RetrievePlanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marinaClient) Retrieve(ctx context.Context, in *RetrievalRequest, opts ...grpc.CallOption) (Marina_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marina_ServiceDesc.Streams[1], "/protobuf.Marina/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &marinaRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marina_RetrieveClient interface {
	Recv() (*RetrievalResponse, error)
	grpc.ClientStream
}

type marinaRetrieveClient struct {
	grpc.ClientStream
}

func (x *marinaRetrieveClient) Recv() (*RetrievalResponse, error) {
	m := new(RetrievalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarinaServer is the server API for Marina service.
// All implementations must embed UnimplementedMarinaServer
// for forward compatibility
type MarinaServer interface {
	RetrievePlan(*RetrievePlanRequest, Marina_RetrievePlanServer) error
	Retrieve(*RetrievalRequest, Marina_RetrieveServer) error
	mustEmbedUnimplementedMarinaServer()
}

// UnimplementedMarinaServer must be embedded to have forward compatible implementations.
type UnimplementedMarinaServer struct {
}

func (UnimplementedMarinaServer) RetrievePlan(*RetrievePlanRequest, Marina_RetrievePlanServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrievePlan not implemented")
}
func (UnimplementedMarinaServer) Retrieve(*RetrievalRequest, Marina_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedMarinaServer) mustEmbedUnimplementedMarinaServer() {}

// UnsafeMarinaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarinaServer will
// result in compilation errors.
type UnsafeMarinaServer interface {
	mustEmbedUnimplementedMarinaServer()
}

func RegisterMarinaServer(s grpc.ServiceRegistrar, srv MarinaServer) {
	s.RegisterService(&Marina_ServiceDesc, srv)
}

func _Marina_RetrievePlan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrievePlanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarinaServer).RetrievePlan(m, &marinaRetrievePlanServer{stream})
}

type Marina_RetrievePlanServer interface {
	Send(*RetrievePlanResponse) error
	grpc.ServerStream
}

type marinaRetrievePlanServer struct {
	grpc.ServerStream
}

func (x *marinaRetrievePlanServer) Send(m *RetrievePlanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marina_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrievalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarinaServer).Retrieve(m, &marinaRetrieveServer{stream})
}

type Marina_RetrieveServer interface {
	Send(*RetrievalResponse) error
	grpc.ServerStream
}

type marinaRetrieveServer struct {
	grpc.ServerStream
}

func (x *marinaRetrieveServer) Send(m *RetrievalResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Marina_ServiceDesc is the grpc.ServiceDesc for Marina service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marina_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Marina",
	HandlerType: (*MarinaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RetrievePlan",
			Handler:       _Marina_RetrievePlan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _Marina_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deployment.proto",
}
